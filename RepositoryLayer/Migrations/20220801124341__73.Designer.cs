// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer;

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220801124341__73")]
    partial class _73
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.DatabaseModels.Authentication.GlobalRight", b =>
                {
                    b.Property<long>("GRightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("GRightDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("GRightName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GRightNameAbbr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsOnResourceLevel")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("GRightId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("GlobalRight", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.Resource", b =>
                {
                    b.Property<long>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ControllerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ResourceDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ResourceEndPoint")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResourceNameAbbr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ResourceTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("ResourceId");

                    b.HasIndex("ActionId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("Resource", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceAction", b =>
                {
                    b.Property<long>("ResourceActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("ResourceActionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ResourceAction", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceController", b =>
                {
                    b.Property<long>("ResourceControllerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("ResourceControllerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ResourceController", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceType", b =>
                {
                    b.Property<long>("ResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ResourceTypeDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ResourceTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResourceTypeNameAbbr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ResourceTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ResourceType", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceTypeDefaultRight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DefaultRTRightId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RTRightId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DefaultRTRightId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RTRightId");

                    b.ToTable("ResourceTypeDefaultRight", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceTypeRight", b =>
                {
                    b.Property<long>("RTRightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("GRightId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGlobalRef")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("RTRightDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RTRightName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RTRightNameAbbr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ResourceTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("RTRightId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GRightId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("ResourceTypeRight", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleNameAbbr")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Role", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.RoleAppProcessFlow", b =>
                {
                    b.Property<long>("RoleAppProcessFlowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AppProcessFlowId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleAppProcessFlowId");

                    b.HasIndex("AppProcessFlowId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RoleId", "AppProcessFlowId")
                        .IsUnique();

                    b.ToTable("RoleAppProcessFlow", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.RoleResource", b =>
                {
                    b.Property<long>("RoleResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleResourceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId", "ResourceId")
                        .IsUnique();

                    b.ToTable("RoleResource", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.RoleResourceRight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RTRightId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleResourceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RTRightId");

                    b.HasIndex("RoleResourceId", "RTRightId")
                        .IsUnique();

                    b.ToTable("RoleResourceRight", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.RoleResourceRightsHistory", b =>
                {
                    b.Property<long>("RoleRightsHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleRightsHistoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("ResourceId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleResourceRightsHistory", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserDistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("UserStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.HasIndex("ModifiedBy")
                        .IsUnique()
                        .HasFilter("[ModifiedBy] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("UserStatusId")
                        .IsUnique();

                    b.HasIndex("UserTypeId")
                        .IsUnique()
                        .HasFilter("[UserTypeId] IS NOT NULL");

                    b.ToTable("User", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserRole", b =>
                {
                    b.Property<long>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpiryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTimeBased")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("UserRole", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserRoleHistory", b =>
                {
                    b.Property<long>("UserRoleHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleHistoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleHistory", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("UserStatus", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("UserType", "Auth");
                });

            modelBuilder.Entity("Models.DatabaseModels.Biometric.BiometricVerification", b =>
                {
                    b.Property<long>("BiometricVerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsBuyer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("NadraFranchiseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("NadraTransId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("VerificationReportedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BiometricVerificationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NadraFranchiseId");

                    b.HasIndex("OwnerGroupId");

                    b.HasIndex("PersonId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("ApplicationId", "PersonId", "VehicleId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("BiometricVerification", "Biometric");
                });

            modelBuilder.Entity("Models.DatabaseModels.Biometric.NadraFranchise", b =>
                {
                    b.Property<long>("NadraFranchiseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FranchiseCellNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FranchiseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FranchiseShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("NadraFranchiseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("NadraFranchise", "Biometric");
                });

            modelBuilder.Entity("Models.DatabaseModels.Logging.HttpRequestLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExceptionRaised")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraceId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("HttpRequestLog", "Logs");
                });

            modelBuilder.Entity("Models.DatabaseModels.Logging.SqlExceptionLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ErrorDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ErrorLine")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrorNumber")
                        .HasColumnType("int");

                    b.Property<string>("ErrorProcedure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrorSeverity")
                        .HasColumnType("int");

                    b.Property<int>("ErrorState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("SqlExceptionLog", "Logs");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.AuctionResult", b =>
                {
                    b.Property<long>("AuctionResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("AuctionedValue")
                        .HasColumnType("bigint");

                    b.Property<string>("CNIC")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ChasisNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FatherHusbandName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OwnerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("SeriesCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesNumberId")
                        .HasColumnType("bigint");

                    b.Property<string>("WinnerAIN")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WinnerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AuctionResultId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SeriesId");

                    b.HasIndex("SeriesNumberId");

                    b.HasIndex("WinnerAIN")
                        .IsUnique()
                        .HasFilter("[WinnerAIN] IS NOT NULL");

                    b.HasIndex("SeriesCategoryId", "SeriesId", "SeriesNumberId")
                        .IsUnique();

                    b.ToTable("AuctionResult", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.Series", b =>
                {
                    b.Property<long>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuctionEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AuctionStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("SeriesCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("SeriesName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("SeriesStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("SeriesId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SeriesStatusId");

                    b.HasIndex("SeriesTypeId");

                    b.HasIndex("SeriesCategoryId", "SeriesName")
                        .IsUnique()
                        .HasFilter("[SeriesName] IS NOT NULL");

                    b.ToTable("Series", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("SeriesCategory", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesNumber", b =>
                {
                    b.Property<long>("SeriesNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentAveragePrice")
                        .HasColumnType("bigint");

                    b.Property<long>("DefaultBasePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("SeriesNumberName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SeriesNumberId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SeriesCategoryId", "SeriesNumberName")
                        .IsUnique()
                        .HasFilter("[SeriesNumberName] IS NOT NULL");

                    b.ToTable("SeriesNumber", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesNumberGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("SeriesNumberGroup", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesNumberPool", b =>
                {
                    b.Property<long>("SeriesNumberPoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BasePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlloted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAuctioned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesNumberGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesNumberId")
                        .HasColumnType("bigint");

                    b.HasKey("SeriesNumberPoolId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SeriesId");

                    b.HasIndex("SeriesNumberGroupId");

                    b.HasIndex("SeriesNumberId");

                    b.HasIndex("SeriesCategoryId", "SeriesId", "SeriesNumberId")
                        .IsUnique();

                    b.ToTable("SeriesNumberPool", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("SeriesStatus", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesStatusHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeriesStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SeriesId");

                    b.HasIndex("SeriesStatusId");

                    b.ToTable("SeriesStatusHistory", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("SeriesType", "SRNRPL");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("AddressTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("TehsilId")
                        .HasColumnType("bigint");

                    b.HasKey("AddressId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("TehsilId");

                    b.HasIndex("AddressTypeId", "BusinessId")
                        .IsUnique()
                        .HasFilter("[BusinessId] IS NOT NULL");

                    b.HasIndex("AddressTypeId", "PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("Address", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.AddressLog", b =>
                {
                    b.Property<long>("AddressLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long>("AddressTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("TehsilId")
                        .HasColumnType("bigint");

                    b.HasKey("AddressLogId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("TehsilId");

                    b.ToTable("AddressLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Application", b =>
                {
                    b.Property<long>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessPhaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessPhaseStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("BusinessPhaseId");

                    b.HasIndex("BusinessPhaseStatusId");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Application", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.ApplicationLog", b =>
                {
                    b.Property<long>("ApplicationLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessPhaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessPhaseStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("ApplicationLogId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ApplicationStatusId");

                    b.HasIndex("BusinessPhaseId");

                    b.HasIndex("BusinessPhaseStatusId");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ApplicationLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.AssessmentBase", b =>
                {
                    b.Property<long>("AssessmentBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ApplicationReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("AssessmentStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfFirstRegistration")
                        .HasColumnType("datetime2");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<int>("EngineSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FitnessCertValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FitnessCertValidTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsFiler")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsHPA")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIncomeTaxExempted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTaxExempted")
                        .HasColumnType("bit");

                    b.Property<long>("LadenWeight")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerTaxGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNo")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<long>("RegistrationNoPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.Property<int>("TaxFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TaxPaidUpto")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaxPeriod")
                        .HasColumnType("int");

                    b.Property<long>("UnLadenWeight")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleBodyTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleClassDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleClassificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehiclePurchaseTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleUsageId")
                        .HasColumnType("bigint");

                    b.HasKey("AssessmentBaseId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AssessmentStatusId");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnerTaxGroupId");

                    b.HasIndex("VehicleBodyTypeId");

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleClassDetailId");

                    b.HasIndex("VehicleClassId");

                    b.HasIndex("VehicleClassificationId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehiclePurchaseTypeId");

                    b.HasIndex("VehicleStatusId");

                    b.HasIndex("VehicleUsageId");

                    b.ToTable("AssessmentBase", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.AssessmentDetail", b =>
                {
                    b.Property<long>("AssessmentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssessmentBaseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PayableAmount")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<long>("TaxTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("AssessmentDetailId");

                    b.HasIndex("AssessmentBaseId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("AssessmentDetail", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Business", b =>
                {
                    b.Property<long>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountPassword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BusinessRegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("BusinessSectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("STN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BusinessId");

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("BusinessStatusId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NTN")
                        .IsUnique()
                        .HasFilter("[NTN] IS NOT NULL");

                    b.ToTable("Business", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.BusinessLog", b =>
                {
                    b.Property<long>("BusinessLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountPassword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BusinessRegNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("BusinessSectorId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("STN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BusinessLogId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("BusinessSectorId");

                    b.HasIndex("BusinessStatusId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.BusinessRep", b =>
                {
                    b.Property<long>("BusinessRepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessRepStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessRepId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("BusinessRepStatusId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PersonId");

                    b.ToTable("BusinessRep", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Challan", b =>
                {
                    b.Property<long>("ChallanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("AssessmentBaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChallanStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChallanTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalAmount")
                        .HasColumnType("bigint");

                    b.HasKey("ChallanId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("AssessmentBaseId");

                    b.HasIndex("ChallanStatusId");

                    b.HasIndex("ChallanTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Challan", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Dealer", b =>
                {
                    b.Property<long>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountPassword")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("DealerId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Dealer", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.HPA", b =>
                {
                    b.Property<long>("HPAId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("HPACurrentStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HPADate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HPAEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HPAStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HPAStatusDated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LetterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LetterNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("SponserBusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("Terms")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("HPAId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HPACurrentStatusId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SponserBusinessId");

                    b.HasIndex("VehicleId");

                    b.ToTable("HPA", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.HPALog", b =>
                {
                    b.Property<long>("HPALogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("HPACurrentStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HPADate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HPAEndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HPAId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HPAStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HPAStatusDated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LetterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LetterNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("SponserBusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("Terms")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("HPALogId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HPACurrentStatusId");

                    b.HasIndex("HPAId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SponserBusinessId");

                    b.HasIndex("VehicleId");

                    b.ToTable("HPALog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.HPAStatusHistory", b =>
                {
                    b.Property<long>("HPAStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("HPAId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("HPAStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HPAStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("HPAStatusHistoryId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("HPAId");

                    b.HasIndex("HPAStatusId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("HPAStatusHistory", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Keeper", b =>
                {
                    b.Property<long>("KeeperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("KeeperPersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("KeeperId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("KeeperPersonId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Keeper", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.KeeperLog", b =>
                {
                    b.Property<long>("KeeperLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("KeeperId")
                        .HasColumnType("bigint");

                    b.Property<long?>("KeeperPersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("KeeperLogId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("KeeperId");

                    b.HasIndex("KeeperPersonId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("KeeperLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Owner", b =>
                {
                    b.Property<long>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerTaxGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("OwnerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerTaxGroupId");

                    b.HasIndex("OwnerTypeId");

                    b.ToTable("Owner", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.OwnerGroup", b =>
                {
                    b.Property<long>("OwnerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsFirstGroupMember")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("OwnerGroupId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("OwnerId", "BusinessId")
                        .IsUnique()
                        .HasFilter("[BusinessId] IS NOT NULL");

                    b.HasIndex("OwnerId", "PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("OwnerGroup", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.OwnerLog", b =>
                {
                    b.Property<long>("OwnerLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerTaxGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("OwnerLogId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("OwnerTaxGroupId");

                    b.HasIndex("OwnerTypeId");

                    b.ToTable("OwnerLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AmountPaid")
                        .HasColumnType("bigint");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CashReceivedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ChallanId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("PSId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("PaymentModeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("PaymentId");

                    b.HasIndex("ChallanId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PaymentModeId");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Payment", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Person", b =>
                {
                    b.Property<long>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FatherHusbandName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OldCNIC")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PersonId");

                    b.HasIndex("CNIC")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Person", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.PersonLog", b =>
                {
                    b.Property<long>("PersonLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FatherHusbandName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("NTN")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OldCNIC")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PersonLogId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.PhoneNumber", b =>
                {
                    b.Property<long>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("PhoneNumberTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumberValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("PhoneNumberTypeId", "BusinessId")
                        .IsUnique()
                        .HasFilter("[BusinessId] IS NOT NULL");

                    b.HasIndex("PhoneNumberTypeId", "PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("PhoneNumber", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.PhoneNumberLog", b =>
                {
                    b.Property<long>("PhoneNumberLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("PhoneNumberId")
                        .HasColumnType("bigint");

                    b.Property<long>("PhoneNumberTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumberValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PhoneNumberLogId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("PhoneNumberLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Remarks", b =>
                {
                    b.Property<long>("RemarksId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("RemarksStatement")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("RemarksId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerGroupId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Remarks", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", b =>
                {
                    b.Property<long>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChasisNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("EngineSize")
                        .HasColumnType("int");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<long>("LadenWeight")
                        .HasColumnType("bigint");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("NoOfCylinder")
                        .HasColumnType("int");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RegistrationDistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistrationNo")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.Property<long>("UnLadenWeight")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleBodyConventionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleBodyTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleClassificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleColorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleEngineTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleFuelTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleMakeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleMakerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehiclePurchaseTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleRouteTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleUsageId")
                        .HasColumnType("bigint");

                    b.Property<string>("WheelBase")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("VehicleId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegistrationDistrictId");

                    b.HasIndex("VehicleBodyConventionId");

                    b.HasIndex("VehicleBodyTypeId");

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleClassId");

                    b.HasIndex("VehicleClassificationId");

                    b.HasIndex("VehicleColorId");

                    b.HasIndex("VehicleEngineTypeId");

                    b.HasIndex("VehicleFuelTypeId");

                    b.HasIndex("VehicleMakerId");

                    b.HasIndex("VehiclePurchaseTypeId");

                    b.HasIndex("VehicleRouteTypeId");

                    b.HasIndex("VehicleStatusId");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex("VehicleUsageId");

                    b.HasIndex("ChasisNo", "RegistrationNo")
                        .IsUnique()
                        .HasFilter("[RegistrationNo] IS NOT NULL");

                    b.HasIndex("VehicleMakeId", "VehicleMakerId", "ChasisNo")
                        .IsUnique()
                        .HasFilter("[VehicleMakeId] IS NOT NULL AND [VehicleMakerId] IS NOT NULL");

                    b.ToTable("Vehicle", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleAdditionalInfo", b =>
                {
                    b.Property<long>("VehicleAdditionalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfFirstRegistration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FitnessCertValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FitnessCertValidTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHPA")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIncomeTaxExempted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTaxExempted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RegistrationNoPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("TaxFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TaxPaidUpto")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaxPeriod")
                        .HasColumnType("int");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleRCStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleAdditionalInfoId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleRCStatusId");

                    b.ToTable("VehicleAdditionalInfo", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleAdditionalInfoLog", b =>
                {
                    b.Property<long>("VehicleAdditionalInfoLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfFirstRegistration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FitnessCertValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FitnessCertValidTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHPA")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIncomeTaxExempted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTaxExempted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RegistrationNoPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("TaxFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TaxPaidUpto")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaxPeriod")
                        .HasColumnType("int");

                    b.Property<long>("VehicleAdditionalInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleRCStatusId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleAdditionalInfoLogId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleAdditionalInfoId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleRCStatusId");

                    b.ToTable("VehicleAdditionalInfoLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleArticleDelivery", b =>
                {
                    b.Property<long>("ArticleDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("CNIC")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FatherName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("VehicleArticleId")
                        .HasColumnType("bigint");

                    b.HasKey("ArticleDeliveryId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleArticleId");

                    b.ToTable("VehicleArticleDelivery", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleAuctionInfo", b =>
                {
                    b.Property<long>("VehicleAuctionInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LotNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("VoucherDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleAuctionInfoId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleId");

                    b.HasIndex("ApplicationId", "VehicleAuctionInfoId")
                        .IsUnique();

                    b.ToTable("VehicleAuctionInfo", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleAuctionInfoLog", b =>
                {
                    b.Property<long>("VehicleAuctionInfoLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("BatchNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LotNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleAuctionInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("VoucherDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoucherNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleAuctionInfoLogId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleAuctionInfoId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleAuctionInfoLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleBusinessProcessHistory", b =>
                {
                    b.Property<long>("VehicleBusinessProHistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleBusinessProHistId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleBusinessProcessHistory", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleDocument", b =>
                {
                    b.Property<long>("VehicleDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MIMEType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.Property<long>("VehicleDocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleDocumentId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleDocumentTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleDocument", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleFileUpload", b =>
                {
                    b.Property<long>("FileUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MIMEType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.Property<long>("VehicleDocumentTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("FileUploadId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleDocumentTypeId");

                    b.ToTable("VehicleFileUpload", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleImportInfo", b =>
                {
                    b.Property<long>("VehicleImportInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnyOtherCost")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClearingAgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomCollectorateId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomDuty")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("IGMDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IGMNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ImportLicenseFee")
                        .HasColumnType("bigint");

                    b.Property<string>("ImportPermitNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ImportValue")
                        .HasColumnType("bigint");

                    b.Property<string>("ImporterAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImporterName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("IndexNo")
                        .HasColumnType("bigint");

                    b.Property<long>("Insurrance")
                        .HasColumnType("bigint");

                    b.Property<long>("LandedCost")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PermitIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaceOfIssue")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("PortId")
                        .HasColumnType("bigint");

                    b.Property<long>("SalesTax")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleSchemeId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleImportInfoId");

                    b.HasIndex("BankId");

                    b.HasIndex("ClearingAgentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomCollectorateId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PortId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleSchemeId");

                    b.HasIndex("ApplicationId", "VehicleImportInfoId")
                        .IsUnique();

                    b.ToTable("VehicleImportInfo", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleImportInfoLog", b =>
                {
                    b.Property<long>("VehicleImportInfoLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AnyOtherCost")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClearingAgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomCollectorateId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomDuty")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("IGMDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IGMNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ImportLicenseFee")
                        .HasColumnType("bigint");

                    b.Property<string>("ImportPermitNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ImportValue")
                        .HasColumnType("bigint");

                    b.Property<string>("ImporterAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImporterName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("IndexNo")
                        .HasColumnType("bigint");

                    b.Property<long>("Insurrance")
                        .HasColumnType("bigint");

                    b.Property<long>("LandedCost")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PermitIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaceOfIssue")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("PortId")
                        .HasColumnType("bigint");

                    b.Property<long>("SalesTax")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleImportInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleSchemeId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleImportInfoLogId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BankId");

                    b.HasIndex("ClearingAgentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomCollectorateId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("PortId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleImportInfoId");

                    b.HasIndex("VehicleSchemeId");

                    b.ToTable("VehicleImportInfoLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleLog", b =>
                {
                    b.Property<long>("VehicleLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChasisNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("EngineSize")
                        .HasColumnType("int");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<long>("LadenWeight")
                        .HasColumnType("bigint");

                    b.Property<int>("ManufacturingYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<int>("NoOfCylinder")
                        .HasColumnType("int");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RegistrationDistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistrationNo")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int");

                    b.Property<long>("UnLadenWeight")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleBodyConventionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleBodyTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleClassificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleColorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleEngineTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleFuelTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleMakeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleMakerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehiclePurchaseTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleRouteTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleUsageId")
                        .HasColumnType("bigint");

                    b.Property<string>("WheelBase")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("VehicleLogId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegistrationDistrictId");

                    b.HasIndex("VehicleBodyConventionId");

                    b.HasIndex("VehicleBodyTypeId");

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleClassId");

                    b.HasIndex("VehicleClassificationId");

                    b.HasIndex("VehicleColorId");

                    b.HasIndex("VehicleEngineTypeId");

                    b.HasIndex("VehicleFuelTypeId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleMakeId");

                    b.HasIndex("VehicleMakerId");

                    b.HasIndex("VehiclePurchaseTypeId");

                    b.HasIndex("VehicleRouteTypeId");

                    b.HasIndex("VehicleStatusId");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex("VehicleUsageId");

                    b.ToTable("VehicleLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleOwnershipHistory", b =>
                {
                    b.Property<long>("VehicleOwnershipHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<long>("BuyerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EffectedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleOwnershipHistoryId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SellerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleOwnershipHistory", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehiclePurchaseInfo", b =>
                {
                    b.Property<long>("VehiclePurchaseInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CertificateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificateNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DealerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InvoiceDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleSchemeId")
                        .HasColumnType("bigint");

                    b.HasKey("VehiclePurchaseInfoId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DealerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleSchemeId");

                    b.HasIndex("ApplicationId", "VehiclePurchaseInfoId")
                        .IsUnique();

                    b.ToTable("VehiclePurchaseInfo", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehiclePurchaseInfoLog", b =>
                {
                    b.Property<long>("VehiclePurchaseInfoLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CertificateDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificateNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DealerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InvoiceDated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehiclePurchaseInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleSchemeId")
                        .HasColumnType("bigint");

                    b.HasKey("VehiclePurchaseInfoLogId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DealerId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehiclePurchaseInfoId");

                    b.HasIndex("VehicleSchemeId");

                    b.ToTable("VehiclePurchaseInfoLog", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleRegistrationHistory", b =>
                {
                    b.Property<long>("VehicleRegHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RegistrationDistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistrationNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("VehicleRegHistoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RegistrationDistrictId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleRegistrationHistory", "Core");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.AccountHead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("AccountHead", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.AddressType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("AddressType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationProcessFlow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessEventId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentApplicationStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentBusinessPhaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentBusinessPhaseStatusId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInitialProcessState")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("NextApplicationStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("NextBusinessPhaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("NextBusinessPhaseStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessEventId");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CurrentBusinessPhaseId");

                    b.HasIndex("CurrentBusinessPhaseStatusId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("NextApplicationStatusId");

                    b.HasIndex("NextBusinessPhaseId");

                    b.HasIndex("NextBusinessPhaseStatusId");

                    b.HasIndex("RoleId");

                    b.HasIndex("CurrentApplicationStatusId", "CurrentBusinessPhaseId", "CurrentBusinessPhaseStatusId", "BusinessProcessId", "RoleId", "BusinessEventId", "NextApplicationStatusId", "NextBusinessPhaseId", "NextBusinessPhaseStatusId")
                        .IsUnique();

                    b.ToTable("ApplicationProcessFlow", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ApplicationStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.AssessmentStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("AssessmentStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Bank", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessEvent", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessPhase", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhaseStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessPhaseStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProFeeTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TaxTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("BusinessProFeeTax", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessProcess", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessRepStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessRepStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessSector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("BusinessTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessSector", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessTable", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessTableAccessLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccessLevel")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessPhaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessPhaseStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessTableId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessPhaseId");

                    b.HasIndex("BusinessPhaseStatusId");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("BusinessTableId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("ApplicationStatusId", "BusinessPhaseId", "BusinessPhaseStatusId", "BusinessProcessId", "BusinessTableId", "RoleId", "AccessLevel")
                        .IsUnique();

                    b.ToTable("BusinessTableAccessLevel", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("BusinessType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ChallanStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ChallanStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ChallanType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ChallanType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ClearingAgent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("ClearingAgent", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Country", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.CustomCollectorate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("CustomCollectorate", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("District", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.HPAStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("HPAStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OrganizationCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("OrganizationCategory", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OwnerStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("OwnerStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OwnerTaxGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ITExemptedClause")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsIncomeTaxExempted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("OwnerTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxExemptedClause")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("OwnerTypeId");

                    b.ToTable("OwnerTaxGroup", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OwnerTaxGroupFees", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("AppliedFrom")
                        .HasColumnType("datetime2");

                    b.Property<long>("OwnerTaxGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerTaxGroupId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("OwnerTaxGroupFees", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OwnerType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("OwnerType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.PaymentMode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("PaymentMode", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.PaymentStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("PaymentStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.PhoneNumberType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("PhoneNumberType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.Port", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Port", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.RegFeePenaltyRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxDays")
                        .HasColumnType("int");

                    b.Property<int>("MinDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PenaltyRate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("RegFeePenaltyRate", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.TaxBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("TaxBase", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.TaxRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TaxBaseId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaxTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaxValue")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)");

                    b.Property<long>("VehicleClassDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleClassId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TaxBaseId");

                    b.HasIndex("TaxTypeId");

                    b.HasIndex("VehicleClassDetailId");

                    b.HasIndex("VehicleClassId");

                    b.ToTable("TaxRate", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.TaxRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("TaxRule", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.TaxType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long?>("TaxRuleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("TaxRuleId");

                    b.ToTable("TaxType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.Tehsil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Tehsil", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleArticle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleArticle", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyConvention", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleBodyConvention", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleBodyType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleCategory", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("AppliedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("EngineSizeMax")
                        .HasColumnType("bigint");

                    b.Property<long>("EngineSizeMin")
                        .HasColumnType("bigint");

                    b.Property<bool>("FitnessDocRequired")
                        .HasColumnType("bit");

                    b.Property<long>("LadenWeightMax")
                        .HasColumnType("bigint");

                    b.Property<long>("LadenWeightMin")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("SeatingCapacityMax")
                        .HasColumnType("bigint");

                    b.Property<long>("SeatingCapacityMin")
                        .HasColumnType("bigint");

                    b.Property<int>("TaxFrequency")
                        .HasColumnType("int");

                    b.Property<long>("UnladenWeightMax")
                        .HasColumnType("bigint");

                    b.Property<long>("UnladenWeightMin")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleBodyTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleClassGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleClassificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleRouteTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleBodyTypeId");

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleClassGroupId");

                    b.HasIndex("VehicleClassificationId");

                    b.HasIndex("VehicleRouteTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleClass", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("AppliedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("EngineSizeMax")
                        .HasColumnType("bigint");

                    b.Property<long>("EngineSizeMin")
                        .HasColumnType("bigint");

                    b.Property<bool>("FitnessDocRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LadenWeightMax")
                        .HasColumnType("bigint");

                    b.Property<long>("LadenWeightMin")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("SeatingCapacityMax")
                        .HasColumnType("bigint");

                    b.Property<long>("SeatingCapacityMin")
                        .HasColumnType("bigint");

                    b.Property<int>("TaxFrequency")
                        .HasColumnType("int");

                    b.Property<long>("UnladenWeightMax")
                        .HasColumnType("bigint");

                    b.Property<long>("UnladenWeightMin")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleBodyTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleClassificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleRouteTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VehicleTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleUsageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleBodyTypeId");

                    b.HasIndex("VehicleCategoryId");

                    b.HasIndex("VehicleClassId");

                    b.HasIndex("VehicleClassificationId");

                    b.HasIndex("VehicleRouteTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex("VehicleUsageId");

                    b.ToTable("VehicleClassDetail", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleClassGroup", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleClassification", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleColor", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleDocumentRequirement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleDocumentTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessProcessId");

                    b.HasIndex("VehicleDocumentTypeId");

                    b.ToTable("VehicleDocumentRequirement", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleDocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleDocumentType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleEngineType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleEngineType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleFuelType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleFuelType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMake", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("VehicleMakerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("VehicleMakerId");

                    b.ToTable("VehicleMake", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMaker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleMaker", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehiclePurchaseType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehiclePurchaseType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRCStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleRCStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRouteType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleRouteType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleScheme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleScheme", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleStatus", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleType", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("VehicleUsage", "Setup");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.GlobalRight", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.Resource", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.ResourceAction", "ResourceAction")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.ResourceController", "ResourceController")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.ResourceType", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("ResourceAction");

                    b.Navigation("ResourceController");

                    b.Navigation("ResourceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceAction", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceController", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceTypeDefaultRight", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.ResourceTypeRight", "DefaultRTRight")
                        .WithMany()
                        .HasForeignKey("DefaultRTRightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.ResourceTypeRight", "RTRight")
                        .WithMany()
                        .HasForeignKey("RTRightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultRTRight");

                    b.Navigation("Modifier");

                    b.Navigation("RTRight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.ResourceTypeRight", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.GlobalRight", "GRight")
                        .WithMany()
                        .HasForeignKey("GRightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.ResourceType", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GRight");

                    b.Navigation("Modifier");

                    b.Navigation("ResourceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.Role", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.RoleAppProcessFlow", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationProcessFlow", "ApplicationProcessFlow")
                        .WithMany()
                        .HasForeignKey("AppProcessFlowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationProcessFlow");

                    b.Navigation("Modifier");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.RoleResource", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Resource");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.RoleResourceRight", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.ResourceTypeRight", "ResourceTypeRight")
                        .WithMany()
                        .HasForeignKey("RTRightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.RoleResource", "RoleResource")
                        .WithMany()
                        .HasForeignKey("RoleResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("ResourceTypeRight");

                    b.Navigation("RoleResource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.RoleResourceRightsHistory", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Resource");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.User", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithOne("User")
                        .HasForeignKey("Models.DatabaseModels.Authentication.User", "ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.UserStatus", null)
                        .WithOne("User")
                        .HasForeignKey("Models.DatabaseModels.Authentication.User", "UserStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.UserType", null)
                        .WithOne("User")
                        .HasForeignKey("Models.DatabaseModels.Authentication.User", "UserTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserRole", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "AssociatedUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociatedUser");

                    b.Navigation("Modifier");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserRoleHistory", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "AssociatedUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociatedUser");

                    b.Navigation("Modifier");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Models.DatabaseModels.Biometric.BiometricVerification", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Biometric.NadraFranchise", "NadraFranchise")
                        .WithMany()
                        .HasForeignKey("NadraFranchiseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.OwnerGroup", "OwnerGroup")
                        .WithMany()
                        .HasForeignKey("OwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Modifier");

                    b.Navigation("NadraFranchise");

                    b.Navigation("OwnerGroup");

                    b.Navigation("Person");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.Biometric.NadraFranchise", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Logging.HttpRequestLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Logging.SqlExceptionLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.AuctionResult", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesCategory", "SeriesCategory")
                        .WithMany()
                        .HasForeignKey("SeriesCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesNumber", "SeriesNumber")
                        .WithMany()
                        .HasForeignKey("SeriesNumberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Series");

                    b.Navigation("SeriesCategory");

                    b.Navigation("SeriesNumber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.Series", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesCategory", "SeriesCategory")
                        .WithMany()
                        .HasForeignKey("SeriesCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesStatus", "SeriesStatus")
                        .WithMany()
                        .HasForeignKey("SeriesStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesType", "SeriesType")
                        .WithMany()
                        .HasForeignKey("SeriesTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("SeriesCategory");

                    b.Navigation("SeriesStatus");

                    b.Navigation("SeriesType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesCategory", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesNumber", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesCategory", "SeriesCategory")
                        .WithMany()
                        .HasForeignKey("SeriesCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("SeriesCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesNumberGroup", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesNumberPool", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesCategory", "SeriesCategory")
                        .WithMany()
                        .HasForeignKey("SeriesCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesNumberGroup", "SeriesNumberGroup")
                        .WithMany()
                        .HasForeignKey("SeriesNumberGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesNumber", "SeriesNumber")
                        .WithMany()
                        .HasForeignKey("SeriesNumberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Series");

                    b.Navigation("SeriesCategory");

                    b.Navigation("SeriesNumber");

                    b.Navigation("SeriesNumberGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesStatusHistory", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.SeriesNumberPool.SeriesStatus", "SeriesStatus")
                        .WithMany()
                        .HasForeignKey("SeriesStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Series");

                    b.Navigation("SeriesStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.SeriesNumberPool.SeriesType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Address", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Tehsil", "Tehsil")
                        .WithMany()
                        .HasForeignKey("TehsilId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AddressType");

                    b.Navigation("Business");

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("Person");

                    b.Navigation("Tehsil");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.AddressLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Tehsil", "Tehsil")
                        .WithMany()
                        .HasForeignKey("TehsilId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("Business");

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("Person");

                    b.Navigation("Tehsil");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Application", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhase", "BusinessPhase")
                        .WithMany()
                        .HasForeignKey("BusinessPhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhaseStatus", "BusinessPhaseStatus")
                        .WithMany()
                        .HasForeignKey("BusinessPhaseStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ApplicationStatus");

                    b.Navigation("BusinessPhase");

                    b.Navigation("BusinessPhaseStatus");

                    b.Navigation("BusinessProcess");

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("Seller");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.ApplicationLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhase", "BusinessPhase")
                        .WithMany()
                        .HasForeignKey("BusinessPhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhaseStatus", "BusinessPhaseStatus")
                        .WithMany()
                        .HasForeignKey("BusinessPhaseStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("ApplicationStatus");

                    b.Navigation("BusinessPhase");

                    b.Navigation("BusinessPhaseStatus");

                    b.Navigation("BusinessProcess");

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("Seller");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.AssessmentBase", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.AssessmentStatus", "AssessmentStatus")
                        .WithMany()
                        .HasForeignKey("AssessmentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.OwnerTaxGroup", "OwnerTaxGroup")
                        .WithMany()
                        .HasForeignKey("OwnerTaxGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyType", "VehicleBodyType")
                        .WithMany()
                        .HasForeignKey("VehicleBodyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleCategory", "VehicleCategory")
                        .WithMany()
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassDetail", "VehicleClassDetail")
                        .WithMany()
                        .HasForeignKey("VehicleClassDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClass", "VehicleClass")
                        .WithMany()
                        .HasForeignKey("VehicleClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassification", "VehicleClassification")
                        .WithMany()
                        .HasForeignKey("VehicleClassificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehiclePurchaseType", "VehiclePurchaseType")
                        .WithMany()
                        .HasForeignKey("VehiclePurchaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleStatus", "VehicleStatus")
                        .WithMany()
                        .HasForeignKey("VehicleStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleUsage", "VehicleUsage")
                        .WithMany()
                        .HasForeignKey("VehicleUsageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("AssessmentStatus");

                    b.Navigation("BusinessProcess");

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("OwnerTaxGroup");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleBodyType");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleClass");

                    b.Navigation("VehicleClassDetail");

                    b.Navigation("VehicleClassification");

                    b.Navigation("VehiclePurchaseType");

                    b.Navigation("VehicleStatus");

                    b.Navigation("VehicleUsage");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.AssessmentDetail", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.AssessmentBase", "AssessmentBase")
                        .WithMany()
                        .HasForeignKey("AssessmentBaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssessmentBase");

                    b.Navigation("Modifier");

                    b.Navigation("TaxType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Business", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessSector", "BusinessSector")
                        .WithMany()
                        .HasForeignKey("BusinessSectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessStatus", "BusinessStatus")
                        .WithMany()
                        .HasForeignKey("BusinessStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BusinessSector");

                    b.Navigation("BusinessStatus");

                    b.Navigation("BusinessType");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.BusinessLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessSector", "BusinessSector")
                        .WithMany()
                        .HasForeignKey("BusinessSectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessStatus", "BusinessStatus")
                        .WithMany()
                        .HasForeignKey("BusinessStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Business");

                    b.Navigation("BusinessSector");

                    b.Navigation("BusinessStatus");

                    b.Navigation("BusinessType");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.BusinessRep", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessRepStatus", "BusinessRepStatus")
                        .WithMany()
                        .HasForeignKey("BusinessRepStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("BusinessRepStatus");

                    b.Navigation("Modifier");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Challan", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.AssessmentBase", "AssessmentBase")
                        .WithMany()
                        .HasForeignKey("AssessmentBaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ChallanStatus", "ChallanStatus")
                        .WithMany()
                        .HasForeignKey("ChallanStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ChallanType", "ChallanType")
                        .WithMany()
                        .HasForeignKey("ChallanTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("AssessmentBase");

                    b.Navigation("ChallanStatus");

                    b.Navigation("ChallanType");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Dealer", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Business");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.HPA", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.HPAStatus", "HPAStatus")
                        .WithMany()
                        .HasForeignKey("HPACurrentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("SponserBusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("Business");

                    b.Navigation("HPAStatus");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.HPALog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.HPAStatus", "HPAStatus")
                        .WithMany()
                        .HasForeignKey("HPACurrentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.HPA", "HPA")
                        .WithMany()
                        .HasForeignKey("HPAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("SponserBusinessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("Business");

                    b.Navigation("HPA");

                    b.Navigation("HPAStatus");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.HPAStatusHistory", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.HPA", "HPA")
                        .WithMany()
                        .HasForeignKey("HPAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.HPAStatus", "HPAStatus")
                        .WithMany()
                        .HasForeignKey("HPAStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("HPA");

                    b.Navigation("HPAStatus");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Keeper", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("KeeperPersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("Person");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.KeeperLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Keeper", "Keeper")
                        .WithMany()
                        .HasForeignKey("KeeperId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("KeeperPersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Keeper");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("Person");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Owner", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.OwnerTaxGroup", "OwnerTaxGroup")
                        .WithMany()
                        .HasForeignKey("OwnerTaxGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.OwnerType", "OwnerType")
                        .WithMany()
                        .HasForeignKey("OwnerTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("OwnerTaxGroup");

                    b.Navigation("OwnerType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.OwnerGroup", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Business");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.OwnerLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.OwnerTaxGroup", "OwnerTaxGroup")
                        .WithMany()
                        .HasForeignKey("OwnerTaxGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.OwnerType", "OwnerType")
                        .WithMany()
                        .HasForeignKey("OwnerTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("OwnerTaxGroup");

                    b.Navigation("OwnerType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Payment", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Challan", "Challan")
                        .WithMany()
                        .HasForeignKey("ChallanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.PaymentMode", "PaymentMode")
                        .WithMany()
                        .HasForeignKey("PaymentModeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.PaymentStatus", "PaymentStatus")
                        .WithMany()
                        .HasForeignKey("PaymentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Challan");

                    b.Navigation("Modifier");

                    b.Navigation("PaymentMode");

                    b.Navigation("PaymentStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Person", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Country");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.PersonLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Modifier");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.PhoneNumber", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.PhoneNumberType", "PhoneNumberType")
                        .WithMany()
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Country");

                    b.Navigation("Modifier");

                    b.Navigation("Person");

                    b.Navigation("PhoneNumberType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.PhoneNumberLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.PhoneNumberType", "PhoneNumberType")
                        .WithMany()
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Country");

                    b.Navigation("Modifier");

                    b.Navigation("Person");

                    b.Navigation("PhoneNumber");

                    b.Navigation("PhoneNumberType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Remarks", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.OwnerGroup", "OwnerGroup")
                        .WithMany()
                        .HasForeignKey("OwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.Role", "CurrentUserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("CurrentUserRole");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("OwnerGroup");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("RegistrationDistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyConvention", "VehicleBodyConvention")
                        .WithMany()
                        .HasForeignKey("VehicleBodyConventionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyType", "VehicleBodyType")
                        .WithMany()
                        .HasForeignKey("VehicleBodyTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleCategory", "VehicleCategory")
                        .WithMany()
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClass", "VehicleClass")
                        .WithMany()
                        .HasForeignKey("VehicleClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassification", "VehicleClassification")
                        .WithMany()
                        .HasForeignKey("VehicleClassificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleColor", "VehicleColor")
                        .WithMany()
                        .HasForeignKey("VehicleColorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleEngineType", "VehicleEngineType")
                        .WithMany()
                        .HasForeignKey("VehicleEngineTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleFuelType", "VehicleFuelType")
                        .WithMany()
                        .HasForeignKey("VehicleFuelTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMake", "VehicleMake")
                        .WithMany()
                        .HasForeignKey("VehicleMakeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMaker", "VehicleMaker")
                        .WithMany()
                        .HasForeignKey("VehicleMakerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehiclePurchaseType", "VehiclePurchaseType")
                        .WithMany()
                        .HasForeignKey("VehiclePurchaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRouteType", "VehicleRouteType")
                        .WithMany()
                        .HasForeignKey("VehicleRouteTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleStatus", "VehicleStatus")
                        .WithMany()
                        .HasForeignKey("VehicleStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleUsage", "VehicleUsage")
                        .WithMany()
                        .HasForeignKey("VehicleUsageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("User");

                    b.Navigation("VehicleBodyConvention");

                    b.Navigation("VehicleBodyType");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleClass");

                    b.Navigation("VehicleClassification");

                    b.Navigation("VehicleColor");

                    b.Navigation("VehicleEngineType");

                    b.Navigation("VehicleFuelType");

                    b.Navigation("VehicleMake");

                    b.Navigation("VehicleMaker");

                    b.Navigation("VehiclePurchaseType");

                    b.Navigation("VehicleRouteType");

                    b.Navigation("VehicleStatus");

                    b.Navigation("VehicleType");

                    b.Navigation("VehicleUsage");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleAdditionalInfo", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRCStatus", "VehicleRCStatus")
                        .WithMany()
                        .HasForeignKey("VehicleRCStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleRCStatus");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleAdditionalInfoLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.VehicleAdditionalInfo", "VehicleAdditionalInfo")
                        .WithMany()
                        .HasForeignKey("VehicleAdditionalInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRCStatus", "VehicleRCStatus")
                        .WithMany()
                        .HasForeignKey("VehicleRCStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleAdditionalInfo");

                    b.Navigation("VehicleRCStatus");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleArticleDelivery", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleArticle", "VehicleArticle")
                        .WithMany()
                        .HasForeignKey("VehicleArticleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("VehicleArticle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleAuctionInfo", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleAuctionInfoLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.VehicleAuctionInfo", "VehicleAuctionInfo")
                        .WithMany()
                        .HasForeignKey("VehicleAuctionInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleAuctionInfo");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleBusinessProcessHistory", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Application");

                    b.Navigation("BusinessProcess");

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleDocument", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleDocumentType", "VehicleDocumentType")
                        .WithMany()
                        .HasForeignKey("VehicleDocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleDocumentType");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleFileUpload", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleDocumentType", "VehicleDocumentType")
                        .WithMany()
                        .HasForeignKey("VehicleDocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("VehicleDocumentType");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleImportInfo", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ClearingAgent", "ClearingAgent")
                        .WithMany()
                        .HasForeignKey("ClearingAgentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.CustomCollectorate", "CustomCollectorate")
                        .WithMany()
                        .HasForeignKey("CustomCollectorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleScheme", "VehicleScheme")
                        .WithMany()
                        .HasForeignKey("VehicleSchemeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Bank");

                    b.Navigation("ClearingAgent");

                    b.Navigation("Country");

                    b.Navigation("CustomCollectorate");

                    b.Navigation("Modifier");

                    b.Navigation("Port");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleScheme");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleImportInfoLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ClearingAgent", "ClearingAgent")
                        .WithMany()
                        .HasForeignKey("ClearingAgentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.CustomCollectorate", "CustomCollectorate")
                        .WithMany()
                        .HasForeignKey("CustomCollectorateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.VehicleImportInfo", "VehicleImportInfo")
                        .WithMany()
                        .HasForeignKey("VehicleImportInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleScheme", "VehicleScheme")
                        .WithMany()
                        .HasForeignKey("VehicleSchemeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Bank");

                    b.Navigation("ClearingAgent");

                    b.Navigation("Country");

                    b.Navigation("CustomCollectorate");

                    b.Navigation("Modifier");

                    b.Navigation("Port");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleImportInfo");

                    b.Navigation("VehicleScheme");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("RegistrationDistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyConvention", "VehicleBodyConvention")
                        .WithMany()
                        .HasForeignKey("VehicleBodyConventionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyType", "VehicleBodyType")
                        .WithMany()
                        .HasForeignKey("VehicleBodyTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleCategory", "VehicleCategory")
                        .WithMany()
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClass", "VehicleClass")
                        .WithMany()
                        .HasForeignKey("VehicleClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassification", "VehicleClassification")
                        .WithMany()
                        .HasForeignKey("VehicleClassificationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleColor", "VehicleColor")
                        .WithMany()
                        .HasForeignKey("VehicleColorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleEngineType", "VehicleEngineType")
                        .WithMany()
                        .HasForeignKey("VehicleEngineTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleFuelType", "VehicleFuelType")
                        .WithMany()
                        .HasForeignKey("VehicleFuelTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMake", "VehicleMake")
                        .WithMany()
                        .HasForeignKey("VehicleMakeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMaker", "VehicleMaker")
                        .WithMany()
                        .HasForeignKey("VehicleMakerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehiclePurchaseType", "VehiclePurchaseType")
                        .WithMany()
                        .HasForeignKey("VehiclePurchaseTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRouteType", "VehicleRouteType")
                        .WithMany()
                        .HasForeignKey("VehicleRouteTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleStatus", "VehicleStatus")
                        .WithMany()
                        .HasForeignKey("VehicleStatusId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleUsage", "VehicleUsage")
                        .WithMany()
                        .HasForeignKey("VehicleUsageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("Owner");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleBodyConvention");

                    b.Navigation("VehicleBodyType");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleClass");

                    b.Navigation("VehicleClassification");

                    b.Navigation("VehicleColor");

                    b.Navigation("VehicleEngineType");

                    b.Navigation("VehicleFuelType");

                    b.Navigation("VehicleMake");

                    b.Navigation("VehicleMaker");

                    b.Navigation("VehiclePurchaseType");

                    b.Navigation("VehicleRouteType");

                    b.Navigation("VehicleStatus");

                    b.Navigation("VehicleType");

                    b.Navigation("VehicleUsage");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleOwnershipHistory", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Owner", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("BusinessProcess");

                    b.Navigation("Buyer");

                    b.Navigation("Modifier");

                    b.Navigation("Seller");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehiclePurchaseInfo", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleScheme", "VehicleScheme")
                        .WithMany()
                        .HasForeignKey("VehicleSchemeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Dealer");

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleScheme");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehiclePurchaseInfoLog", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Dealer", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.VehiclePurchaseInfo", "VehiclePurchaseInfo")
                        .WithMany()
                        .HasForeignKey("VehiclePurchaseInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleScheme", "VehicleScheme")
                        .WithMany()
                        .HasForeignKey("VehicleSchemeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Dealer");

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("VehiclePurchaseInfo");

                    b.Navigation("VehicleScheme");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Core.VehicleRegistrationHistory", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("RegistrationDistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Core.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.AccountHead", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.AddressType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationProcessFlow", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessEvent", "BusinessEvent")
                        .WithMany()
                        .HasForeignKey("BusinessEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationStatus", "CurrentApplicationStatus")
                        .WithMany()
                        .HasForeignKey("CurrentApplicationStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhase", "CurrentBusinessPhase")
                        .WithMany()
                        .HasForeignKey("CurrentBusinessPhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhaseStatus", "CurrentBusinessPhaseStatus")
                        .WithMany()
                        .HasForeignKey("CurrentBusinessPhaseStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationStatus", "NextApplicationStatus")
                        .WithMany()
                        .HasForeignKey("NextApplicationStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhase", "NextBusinessPhase")
                        .WithMany()
                        .HasForeignKey("NextBusinessPhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhaseStatus", "NextBusinessPhaseStatus")
                        .WithMany()
                        .HasForeignKey("NextBusinessPhaseStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessEvent");

                    b.Navigation("BusinessProcess");

                    b.Navigation("CurrentApplicationStatus");

                    b.Navigation("CurrentBusinessPhase");

                    b.Navigation("CurrentBusinessPhaseStatus");

                    b.Navigation("Modifier");

                    b.Navigation("NextApplicationStatus");

                    b.Navigation("NextBusinessPhase");

                    b.Navigation("NextBusinessPhaseStatus");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.AssessmentStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.Bank", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessEvent", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhase", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhaseStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProFeeTax", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessProcess");

                    b.Navigation("Modifier");

                    b.Navigation("TaxType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessRepStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessSector", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessType", "BusinessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BusinessType");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessTable", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessTableAccessLevel", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.ApplicationStatus", "ApplicationStatus")
                        .WithMany()
                        .HasForeignKey("ApplicationStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhase", "BusinessPhase")
                        .WithMany()
                        .HasForeignKey("BusinessPhaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessPhaseStatus", "BusinessPhaseStatus")
                        .WithMany()
                        .HasForeignKey("BusinessPhaseStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessTable", "BusinessTable")
                        .WithMany()
                        .HasForeignKey("BusinessTableId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.Authentication.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationStatus");

                    b.Navigation("BusinessPhase");

                    b.Navigation("BusinessPhaseStatus");

                    b.Navigation("BusinessProcess");

                    b.Navigation("BusinessTable");

                    b.Navigation("Modifier");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.BusinessType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ChallanStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ChallanType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.ClearingAgent", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.Country", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.CustomCollectorate", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.District", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.HPAStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OrganizationCategory", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OwnerStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OwnerTaxGroup", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.OwnerType", "OwnerType")
                        .WithMany()
                        .HasForeignKey("OwnerTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("OwnerType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OwnerTaxGroupFees", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.OwnerTaxGroup", "OwnerTaxGroup")
                        .WithMany()
                        .HasForeignKey("OwnerTaxGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OwnerTaxGroup");

                    b.Navigation("TaxType");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.OwnerType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.PaymentMode", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.PaymentStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.PhoneNumberType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.Port", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.RegFeePenaltyRate", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.TaxBase", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.TaxRate", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.TaxBase", "TaxBase")
                        .WithMany()
                        .HasForeignKey("TaxBaseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.TaxType", "TaxType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassDetail", "VehicleClassDetail")
                        .WithMany()
                        .HasForeignKey("VehicleClassDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClass", "VehicleClass")
                        .WithMany()
                        .HasForeignKey("VehicleClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("TaxBase");

                    b.Navigation("TaxType");

                    b.Navigation("User");

                    b.Navigation("VehicleClass");

                    b.Navigation("VehicleClassDetail");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.TaxRule", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.TaxType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.TaxRule", "TaxRule")
                        .WithMany()
                        .HasForeignKey("TaxRuleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("TaxRule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.Tehsil", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("District");

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleArticle", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyConvention", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleCategory", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClass", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyType", "VehicleBodyType")
                        .WithMany()
                        .HasForeignKey("VehicleBodyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleCategory", "VehicleCategory")
                        .WithMany()
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassGroup", "VehicleClassGroup")
                        .WithMany()
                        .HasForeignKey("VehicleClassGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassification", "VehicleClassification")
                        .WithMany()
                        .HasForeignKey("VehicleClassificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRouteType", "VehicleRouteType")
                        .WithMany()
                        .HasForeignKey("VehicleRouteTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("VehicleBodyType");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleClassGroup");

                    b.Navigation("VehicleClassification");

                    b.Navigation("VehicleRouteType");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassDetail", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleBodyType", "VehicleBodyType")
                        .WithMany()
                        .HasForeignKey("VehicleBodyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleCategory", "VehicleCategory")
                        .WithMany()
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClass", "VehicleClass")
                        .WithMany()
                        .HasForeignKey("VehicleClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassification", "VehicleClassification")
                        .WithMany()
                        .HasForeignKey("VehicleClassificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRouteType", "VehicleRouteType")
                        .WithMany()
                        .HasForeignKey("VehicleRouteTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleUsage", "VehicleUsage")
                        .WithMany()
                        .HasForeignKey("VehicleUsageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("VehicleBodyType");

                    b.Navigation("VehicleCategory");

                    b.Navigation("VehicleClass");

                    b.Navigation("VehicleClassification");

                    b.Navigation("VehicleRouteType");

                    b.Navigation("VehicleType");

                    b.Navigation("VehicleUsage");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassGroup", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleClassification", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleColor", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleDocumentRequirement", b =>
                {
                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleDocumentType", "VehicleDocumentType")
                        .WithMany()
                        .HasForeignKey("VehicleDocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessProcess");

                    b.Navigation("VehicleDocumentType");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleDocumentType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleEngineType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleFuelType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMake", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMaker", "VehicleMaker")
                        .WithMany()
                        .HasForeignKey("VehicleMakerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");

                    b.Navigation("VehicleMaker");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleMaker", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehiclePurchaseType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRCStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleRouteType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleScheme", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleStatus", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleType", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.VehicleRegistration.Setup.VehicleUsage", b =>
                {
                    b.HasOne("Models.DatabaseModels.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.DatabaseModels.Authentication.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Modifier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.User", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserStatus", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.DatabaseModels.Authentication.UserType", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
